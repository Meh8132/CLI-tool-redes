#!/usr/bin/env node

const { Command } = require('commander');
const fs = require('fs');
require('dotenv').config();
const OpenAI = require('openai');

const program = new Command();

// Configuraci√≥n de la CLI
program
  .version('1.0.0')
  .description('Herramienta de an√°lisis de vulnerabilidades en c√≥digo')
  .requiredOption('-f, --file <path>', 'Ruta al archivo de c√≥digo a analizar')
  .parse(process.argv);

// Validar y cargar configuraci√≥n
const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

if (!process.env.OPENAI_API_KEY) {
  console.error('Error: Falta la clave de API de OpenAI en el archivo .env');
  process.exit(1);
}

// Funci√≥n principal de an√°lisis
async function analyzeCode(filePath) {
  try {
    // Validar archivo
    if (!fs.existsSync(filePath) || !fs.statSync(filePath).isFile()) {
      throw new Error('El archivo especificado no existe o no es v√°lido');
    }

    // Leer c√≥digo fuente
    const codeContent = fs.readFileSync(filePath, 'utf-8');

    // Preparar prompt para OpenAI
    const prompt = `Eres un experto en seguridad de c√≥digo. Analiza el siguiente c√≥digo en busca de vulnerabilidades:
    
${codeContent}

Proporciona:
1. Lista de vulnerabilidades encontradas con severidad (Alta, Media, Baja)
2. Descripci√≥n t√©cnica de cada vulnerabilidad
3. N√∫meros de l√≠nea afectados
4. Recomendaciones de mitigaci√≥n
5. Si no se encuentran vulnerabilidades, indica "No se encontraron vulnerabilidades cr√≠ticas"`;

    // Enviar solicitud a OpenAI
    const response = await openai.chat.completions.create({
      model: 'gpt-4',
      messages: [{
        role: 'system',
        content: 'Eres un analizador de seguridad de c√≥digo especializado en detectar vulnerabilidades.'
      }, {
        role: 'user',
        content: prompt
      }],
      temperature: 0.3
    });

    // Mostrar resultados
    console.log('\nüîç An√°lisis de seguridad:\n');
    console.log(response.choices[0].message.content);
    console.log('\n');

  } catch (error) {
    console.error(`‚ùå Error durante el an√°lisis: ${error.message}`);
    process.exit(1);
  }
}

// Ejecutar an√°lisis
analyzeCode(program.opts().file);